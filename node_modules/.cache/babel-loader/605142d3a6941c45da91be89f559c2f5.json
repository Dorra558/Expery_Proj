{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\user16\\\\Desktop\\\\Front1\\\\Plateforme-Expery\\\\src\\\\components\\\\Forms\\\\Login.js\";\nimport React, { Component } from \"react\";\nimport { Row, Col, FormGroup, FormControl, Button } from 'react-bootstrap';\nimport '../../Css/Form.css';\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from '../Forms/validator';\nimport NavigationBar from '../Nav/NavigationBar';\nexport class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.value;\n      const name = target.name;\n      let {\n        formData\n      } = this.state;\n      formData[name] = value;\n      this.setState({\n        formData: formData\n      });\n    };\n\n    this.validateLoginForm = e => {\n      let errors = {};\n      const {\n        formData\n      } = this.state;\n\n      if (isEmpty(formData.email)) {\n        errors.email = \"Email can't be blank\";\n      } else if (!isEmail(formData.email)) {\n        errors.email = \"Please enter a valid email\";\n      }\n\n      if (isEmpty(formData.password)) {\n        errors.password = \"Password can't be blank\";\n      } else if (isContainWhiteSpace(formData.password)) {\n        errors.password = \"Password should not contain white spaces\";\n      } else if (!isLength(formData.password, {\n        gte: 6,\n        lte: 16,\n        trim: true\n      })) {\n        errors.password = \"Password's length must between 6 to 16\";\n      }\n\n      if (isEmpty(errors)) {\n        return true;\n      } else {\n        return errors;\n      }\n    };\n\n    this.login = e => {\n      e.preventDefault();\n      let errors = this.validateLoginForm();\n\n      if (errors === true) {\n        alert(\"You are successfully signed in...\");\n        window.location.reload();\n      } else {\n        this.setState({\n          errors: errors,\n          formSubmitted: true\n        });\n      }\n    };\n\n    this.state = {\n      formData: {},\n      // Contains login form data\n      errors: {},\n      // Contains login field errors\n      formSubmitted: false,\n      // Indicates submit status of login form\n      loading: false // Indicates in progress state of login form\n\n    };\n  }\n\n  render() {\n    const {\n      errors,\n      formSubmitted\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Login\",\n      children: [/*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          md: {\n            span: 4,\n            offset: 4\n          },\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: this.login,\n            className: \"formulaire px-4 py-5\",\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              controlId: \"email\",\n              validationState: formSubmitted ? errors.email ? 'error' : 'success' : null,\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                type: \"text\",\n                className: \"sign\",\n                name: \"email\",\n                placeholder: \"Enter your email\",\n                onChange: this.handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this), errors.email && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-danger\",\n                children: errors.email\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 38\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              controlId: \"password\",\n              validationState: formSubmitted ? errors.password ? 'error' : 'success' : null,\n              children: [/*#__PURE__*/_jsxDEV(FormControl, {\n                type: \"password\",\n                className: \"sign\",\n                name: \"password\",\n                placeholder: \"Enter your password\",\n                onChange: this.handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 21\n              }, this), errors.password && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-danger\",\n                children: errors.password\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              bsStyle: \"primary\",\n              className: \"submitt\",\n              children: \"Sign In\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default Login;\n/*import React from 'react'\r\nimport {useState} from 'react';\r\nimport {Form, Row, Col, InputGroup, Button } from 'react-bootstrap';\r\nfunction Login() {\r\n    const [validated, setValidated] = useState(false);\r\n  \r\n    const handleSubmit = (event) => {\r\n      const form = event.currentTarget;\r\n      if (form.checkValidity() === false) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n      }\r\n  \r\n      setValidated(true);\r\n    };\r\n  \r\n    return (\r\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n        <Form>\r\n          <Form.Group  controlId=\"validationCustom01\">\r\n            <Form.Control\r\n              required\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              \r\n            />\r\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Group  controlId=\"validationCustomUsername\">\r\n            <InputGroup>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Username\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                required\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Please choose a username.\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        <Form.Group>\r\n          <Form.Check\r\n            required\r\n\r\n            feedback=\"You must agree before submitting.\"\r\n          />\r\n        </Form.Group>\r\n        <Button type=\"submit\">Submit form</Button>\r\n      </Form>\r\n    );\r\n  }\r\n  \r\n\r\nexport default Login*/","map":{"version":3,"sources":["C:/Users/user16/Desktop/Front1/Plateforme-Expery/src/components/Forms/Login.js"],"names":["React","Component","Row","Col","FormGroup","FormControl","Button","isEmail","isEmpty","isLength","isContainWhiteSpace","NavigationBar","Login","constructor","props","handleInputChange","event","target","value","name","formData","state","setState","validateLoginForm","e","errors","email","password","gte","lte","trim","login","preventDefault","alert","window","location","reload","formSubmitted","loading","render","span","offset"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, FormGroup, FormControl, Button } from 'react-bootstrap';\r\nimport '../../Css/Form.css';\r\nimport { isEmail, isEmpty, isLength, isContainWhiteSpace } from '../Forms/validator';\r\nimport NavigationBar from '../Nav/NavigationBar';\r\n\r\nexport class Login extends Component { \r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            formData: {}, // Contains login form data\r\n            errors: {}, // Contains login field errors\r\n            formSubmitted: false, // Indicates submit status of login form\r\n            loading: false // Indicates in progress state of login form\r\n        }\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        let { formData } = this.state;\r\n        formData[name] = value;\r\n\r\n        this.setState({\r\n            formData: formData\r\n        });\r\n    }\r\n\r\n    validateLoginForm = (e) => {\r\n\r\n        let errors = {};\r\n        const { formData } = this.state;\r\n\r\n        if (isEmpty(formData.email)) {\r\n            errors.email = \"Email can't be blank\";\r\n        } else if (!isEmail(formData.email)) {\r\n            errors.email = \"Please enter a valid email\";\r\n        }\r\n\r\n        if (isEmpty(formData.password)) {\r\n            errors.password = \"Password can't be blank\";\r\n        }  else if (isContainWhiteSpace(formData.password)) {\r\n            errors.password = \"Password should not contain white spaces\";\r\n        } else if (!isLength(formData.password, { gte: 6, lte: 16, trim: true })) {  \r\n            errors.password = \"Password's length must between 6 to 16\";\r\n        }\r\n\r\n        if (isEmpty(errors)) {\r\n            return true;\r\n        } else {\r\n            return errors;\r\n        }\r\n    }\r\n\r\n    login = (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        let errors = this.validateLoginForm();\r\n\r\n        if(errors === true){\r\n            alert(\"You are successfully signed in...\");\r\n            window.location.reload()\r\n        } else {\r\n            this.setState({\r\n                errors: errors,\r\n                formSubmitted: true\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        const { errors, formSubmitted } = this.state;\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n              <NavigationBar/>\r\n              <Row>\r\n                 <Col md={{ span: 4, offset: 4 }}> \r\n                <form onSubmit={this.login} className=\"formulaire px-4 py-5\">\r\n          \r\n                  <FormGroup controlId=\"email\" validationState={formSubmitted ? (errors.email ? 'error' : 'success') : null}>\r\n                    <FormControl type=\"text\" className='sign' name=\"email\" placeholder=\"Enter your email\" onChange={this.handleInputChange} />\r\n                    {errors.email && <span className=\"text-danger\">{errors.email}</span>}\r\n                  </FormGroup>\r\n\r\n                  <FormGroup controlId=\"password\" validationState={formSubmitted ? (errors.password ? 'error' : 'success') : null}>\r\n                    <FormControl type=\"password\" className='sign' name=\"password\" placeholder=\"Enter your password\" onChange={this.handleInputChange} />\r\n                    {errors.password && <span className=\"text-danger\">{errors.password}</span>}\r\n                  </FormGroup>\r\n\r\n                  <Button type=\"submit\" bsStyle=\"primary\" className='submitt'>Sign In</Button>\r\n                </form>\r\n                 </Col>\r\n                </Row>\r\n\r\n            </div>\r\n            \r\n          )\r\n    }\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*import React from 'react'\r\nimport {useState} from 'react';\r\nimport {Form, Row, Col, InputGroup, Button } from 'react-bootstrap';\r\nfunction Login() {\r\n    const [validated, setValidated] = useState(false);\r\n  \r\n    const handleSubmit = (event) => {\r\n      const form = event.currentTarget;\r\n      if (form.checkValidity() === false) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n      }\r\n  \r\n      setValidated(true);\r\n    };\r\n  \r\n    return (\r\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n        <Form>\r\n          <Form.Group  controlId=\"validationCustom01\">\r\n            <Form.Control\r\n              required\r\n              type=\"email\"\r\n              placeholder=\"Email\"\r\n              \r\n            />\r\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\r\n          </Form.Group>\r\n\r\n          <Form.Group  controlId=\"validationCustomUsername\">\r\n            <InputGroup>\r\n\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Username\"\r\n                aria-describedby=\"inputGroupPrepend\"\r\n                required\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Please choose a username.\r\n              </Form.Control.Feedback>\r\n            </InputGroup>\r\n          </Form.Group>\r\n        </Form>\r\n\r\n        <Form.Group>\r\n          <Form.Check\r\n            required\r\n\r\n            feedback=\"You must agree before submitting.\"\r\n          />\r\n        </Form.Group>\r\n        <Button type=\"submit\">Submit form</Button>\r\n      </Form>\r\n    );\r\n  }\r\n  \r\n\r\nexport default Login*/\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}